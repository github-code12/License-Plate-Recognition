# INSTALL DEPENDENCIES
!pip install ultralytics opencv-python pytesseract -q
!apt-get install -y tesseract-ocr

# IMPORTS
import cv2
import pytesseract
from ultralytics import YOLO
import numpy as np

# LOAD MODELS
vehicle_model = YOLO("yolov8n.pt")  # Built-in model
plate_model = YOLO("license_plate_detector.pt")  # Your custom plate model

# VIDEO INPUT
cap = cv2.VideoCapture("cv3.mp4")
if not cap.isOpened():
    print("Error: Couldn't open video.")
    exit()

# VIDEO PROPERTIES
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))
fps = int(cap.get(cv2.CAP_PROP_FPS))

# OUTPUT VIDEO
out = cv2.VideoWriter("output_6char.mp4", cv2.VideoWriter_fourcc(*'mp4v'), 10, (frame_width, frame_height))

# TRACK VEHICLES
tracked_vehicles = {}

def is_same_vehicle(box1, box2, threshold=100):
    x1, y1, x2, y2 = box1
    x3, y3, x4, y4 = box2
    c1 = ((x1 + x2) // 2, (y1 + y2) // 2)
    c2 = ((x3 + x4) // 2, (y3 + y4) // 2)
    return np.linalg.norm(np.array(c1) - np.array(c2)) < threshold

prev_gray = None

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # MOTION DETECTION
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)

    motion_mask = None
    if prev_gray is not None:
        diff = cv2.absdiff(prev_gray, blur)
        _, motion_mask = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)

    prev_gray = blur.copy()

    vehicle_results = vehicle_model(frame)[0]

    for box in vehicle_results.boxes:
        class_id = int(box.cls[0])
        label = vehicle_results.names[class_id]
        if label not in ["car", "truck", "bus"]:
            continue

        x1, y1, x2, y2 = map(int, box.xyxy[0])
        vehicle_width = x2 - x1
        vehicle_height = y2 - y1

        # âœ… Skip large objects (likely warehouse or junk)
        if (vehicle_width * vehicle_height) > (frame_width * frame_height * 0.4):
            continue

        # âœ… MOTION CHECK
        is_moving = True
        motion_level = 0
        if motion_mask is not None:
            vehicle_motion = motion_mask[y1:y2, x1:x2]
            motion_level = np.mean(vehicle_motion)
            if motion_level < 10:  # too low = likely static
                is_moving = False

        if not is_moving:
            continue

        current_box = (x1, y1, x2, y2)

        matched_id = None
        for vehicle_id, data in tracked_vehicles.items():
            if is_same_vehicle(current_box, data['box']):
                matched_id = vehicle_id
                break

        if matched_id is None:
            matched_id = len(tracked_vehicles) + 1
            tracked_vehicles[matched_id] = {"box": current_box, "plate": None}

        tracked_vehicles[matched_id]["box"] = current_box

        best_plate_text = None
        if vehicle_height > 100:  # Only for close cars
            vehicle_roi = frame[y1:y2, x1:x2]
            plate_results = plate_model(vehicle_roi)

            for plate_result in plate_results:
                for plate_box in plate_result.boxes:
                    px1, py1, px2, py2 = map(int, plate_box.xyxy[0])
                    plate_roi = vehicle_roi[py1:py2, px1:px2]

                    gray_plate = cv2.cvtColor(plate_roi, cv2.COLOR_BGR2GRAY)
                    _, thresh = cv2.threshold(gray_plate, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

                    raw_text = pytesseract.image_to_string(
                        thresh,
                        config="--psm 7 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"
                    )
                    plate_text = raw_text.strip().replace(" ", "").replace("\n", "")

                    if len(plate_text) in [7, 8] and plate_text.count('-') == 2:
                        best_plate_text = plate_text
                        break
                if best_plate_text:
                    break

        if best_plate_text:
            tracked_vehicles[matched_id]["plate"] = best_plate_text

        # âœ… Draw green box around every moving vehicle
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # âœ… Show plate only if nearby & valid
        plate_to_show = tracked_vehicles[matched_id]["plate"]
        if plate_to_show and plate_to_show.count('-') == 2 and vehicle_height > 100:
            cv2.putText(frame, plate_to_show, (x1, y2 + 25),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 0), 2)

    out.write(frame)

# DONE
cap.release()
out.release()
print("âœ… DONE BHAI! Video saved as: output_6char.mp4 ðŸ”¥")
